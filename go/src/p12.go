/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
	"fmt"
	"utils"
)

var primes []uint64

func init() {
	primes = utils.PrimesUpTo(15000)
}

func main() {
	// Start at the 500th triangle number.
	var triangle, n uint64 = 125250, 500
	
	for {
		factors := factor(triangle)
		divisors := countDivisors(factors)
		
		if divisors > 500 {
			fmt.Printf("%d with factors %v has %d divisors", triangle, factors, divisors)
			break
		} else {
			n++
			triangle += n
		}
	}
}

func factor(n uint64) []uint64 {
	if n == 1 {
		return []uint64{}
	}
	
	for i := 0; primes[i] <= n; i++ {
		p := primes[i]
		if n % p == 0 {
			return append(factor(n / p), p)
		}
	}
	
	return nil
}

func countDivisors(factors []uint64) int {
	exp := make(map[uint64]int)
	
	for _, prime := range factors {
		e, ok := exp[prime]
		if !ok {
			e = 0
		}
		
		exp[prime] = e + 1
	}
	
	divisors := 1
	for _, e := range exp {
		divisors *= e + 1
	}
	
	return divisors
}
